import numpy as np
import matplotlib.pyplot as plt

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size, learning_rate=0.01):
        # Initialize weights and biases
        self.W1 = np.random.randn(input_size, hidden_size)
        self.b1 = np.zeros((1, hidden_size))
        self.W2 = np.random.randn(hidden_size, output_size)
        self.b2 = np.zeros((1, output_size))
        self.learning_rate = learning_rate

    def sigmoid(self, x):
        # Sigmoid activation function
        return 1 / (1 + np.exp(-x))
    
    def sigmoid_deriv(self, x):
        # Derivative of sigmoid function
        return x * (1 - x)

    def forward(self, X):
        # Forward pass: input -> hidden -> output
        self.z1 = np.dot(X, self.W1) + self.b1
        self.a1 = self.sigmoid(self.z1)
        self.z2 = np.dot(self.a1, self.W2) + self.b2
        self.a2 = self.sigmoid(self.z2)
        return self.a2

    def backward(self, X, y, output):
        # Output layer error and delta
        output_error = y - output
        output_delta = output_error * self.sigmoid_deriv(output)

        # Hidden layer error and delta
        a1_error = output_delta.dot(self.W2.T)
        a1_delta = a1_error * self.sigmoid_deriv(self.a1)

        # Update weights and biases
        self.W2 += self.a1.T.dot(output_delta) * self.learning_rate
        self.b2 += np.sum(output_delta, axis=0, keepdims=True) * self.learning_rate
        self.W1 += X.T.dot(a1_delta) * self.learning_rate
        self.b1 += np.sum(a1_delta, axis=0, keepdims=True) * self.learning_rate

    def train(self, X, y, epochs=10000):
        # Store loss values for visualization
        losses = []
        for epoch in range(epochs):
            output = self.forward(X)
            self.backward(X, y, output)
            loss = np.mean(np.square(y - output))
            losses.append(loss)
            if epoch % 1000 == 0:
                print(f'Epoch {epoch}, Loss: {loss:.4f}')
        return losses

    def predict(self, X):
        # Return rounded predictions (0 or 1)
        output = self.forward(X)
        return np.round(output)

if __name__ == "__main__":
    # XOR problem - input and output
    X = np.array([[0,0],[0,1],[1,0],[1,1]])
    y = np.array([[0],[1],[1],[0]])

    # Create neural network with 2 input nodes, 4 hidden, and 1 output
    nn = NeuralNetwork(input_size=2, hidden_size=4, output_size=1, learning_rate=0.1)
    
    # Train and collect loss values
    losses = nn.train(X, y, epochs=10000)
    
    # Visualization of the loss curve
    plt.plot(losses)
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.title('Training Loss Curve')
    plt.show()
    
    # Print predictions for XOR problem
    print("Predictions after training:")
    print(nn.predict(X))
