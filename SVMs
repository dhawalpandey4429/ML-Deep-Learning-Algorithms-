import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC

# 1. Load example dataset (Iris)
iris = datasets.load_iris()
X = iris.data[:, :2]  # Use first two features for easy visualization
y = iris.target

# 2. Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. Create and train SVM classifier
# Using linear kernel for simplicity
svc = SVC(kernel='linear', C=1.0)
svc.fit(X_train, y_train)

# 4. Visualize the decision boundaries
def plot_svm_decision_boundary(clf, X, y, title):
    # Create a mesh to plot the decision boundary
    x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5
    y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5
    h = .02  # step size in the mesh
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                         np.arange(y_min, y_max, h))

    # Predict the classification for each point in the mesh
    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)

    # Plot the decision boundary
    plt.contourf(xx, yy, Z, cmap=plt.cm.coolwarm, alpha=0.8)
    # Plot training points
    scatter = plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.coolwarm, edgecolors='k')
    plt.xlabel(iris.feature_names[0])
    plt.ylabel(iris.feature_names[1])
    plt.title(title)
    plt.legend(*scatter.legend_elements(), title="Classes")
    plt.show()

plot_svm_decision_boundary(svc, X_train, y_train, "SVM Decision Boundary (Training Data)")

# 5. Evaluate performance and visualize test data
score = svc.score(X_test, y_test)
print(f"Test Accuracy: {score:.2f}")

plot_svm_decision_boundary(svc, X_test, y_test, "SVM Decision Boundary (Test Data)")

# 6. Visualize support vectors
plt.scatter(X_train[:, 0], X_train[:, 1], c=y_train, cmap=plt.cm.coolwarm, edgecolors='k')
plt.scatter(svc.support_vectors_[:, 0], svc.support_vectors_[:, 1], s=100, facecolors='none', edgecolors='k', label='Support Vectors')
plt.xlabel(iris.feature_names[0])
plt.ylabel(iris.feature_names[1])
plt.title("Support Vectors Visualization")
plt.legend()
plt.show()

# Comments:
# - SVM finds the optimal hyperplane that separates data points of different classes.
# - The support vectors are the points closest to the decision boundary.
# - Decision boundaries can be visualized for 2D data.
# - For more complex data, nonlinear kernels like 'rbf' or 'poly' can be used.
